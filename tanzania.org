** Setup
   :PROPERTIES:
   :CUSTOM_ID: setup
   :END:

To retrieve World Bank Microdata, register here:
https://microdata.worldbank.org/index.php/auth/register/

#+BEGIN_SRC ipython
    import pandas as pd
    import numpy as np
#+END_SRC

#+BEGIN_SRC ipython :results none
    Sheets = {'Worldbank Data':'11koLGy-dWu60nVKAV8QsrwncIRZWM8IAADw4PG_Qd64',
              'Nutrient Tables':'18EuF3OLGDB6-hb9PToJzDMfyvN8cDqEpzPmQl9leJBU',
             }


    # The function below adapted from Gianmario Spacagna's suggestion at
    # https://stackoverflow.com/questions/19611729/getting-google-spreadsheet-csv-into-a-pandas-dataframe
    def dataframe_from_gspreadsheet(sheet_name, key):
        """Transform public google spreadsheet into pandas.DataFrame."""
        
        url = 'https://docs.google.com/spreadsheets/d/{key}/gviz/tq?tqx=out:csv&sheet={sheet_name}&headers=1'.format(
            key=key, sheet_name=sheet_name.replace(' ', '%20'))

        df = pd.read_csv(url)

        return df.drop([col for col in df.columns if col.startswith('Unnamed')], axis=1)
#+END_SRC

** Generating Expenditures and Quantities
   :PROPERTIES:
   :CUSTOM_ID: generating-expenditures-and-quantities
   :END:

#+BEGIN_SRC ipython
    #Creating Itemcode Dictionary
    itemcodes = dataframe_from_gspreadsheet("itemcodes", Sheets['Worldbank Data']).set_index('itemcode')
    itemcodes.to_dict()
#+END_SRC


#+BEGIN_SRC ipython
    x = dataframe_from_gspreadsheet("hh_sec_j1", Sheets['Worldbank Data'])
    x.rename(columns = {'y4_hhid':'j'}, inplace = True)

    # Generating expenditures df
    expenditures = x.pivot(index = 'j', columns = 'itemcode',values = 'hh_j04').fillna(0)
    expenditures.columns = expenditures.columns.to_series().map(itemcodes['item description'])
    expenditures['t'] = 2015
    expenditures['m'] = 'Tanzania'
    expenditures = expenditures.reset_index().set_index(['j','t','m'])
    #expenditures.head()

    # Generating quantities df
    # Right now, this is the raw quantity listed in column hh_j02_2: How much in total did your household consume in the past 7 days?

    quantities = x.pivot(index = 'j', columns = 'itemcode',values = 'hh_j02_2').fillna(0)
    quantities.columns = quantities.columns.to_series().map(itemcodes['item description'])
    quantities['t'] = 2015
    quantities['m'] = 'Tanzania'
    quantities = quantities.reset_index().set_index(['j','t','m'])
    quantities.head()
#+END_SRC



** Demographics
   :PROPERTIES:
   :CUSTOM_ID: demographics
   :END:

#+BEGIN_SRC ipython
hhroster = dataframe_from_gspreadsheet("ag_sec_01", Sheets["Worldbank Data"])
hhroster.head()
#+END_SRC



| Name     | Label                                  |
|----------+----------------------------------------|
| occ      | Case Section Roster                    |
| y4\_hhid | Unique Household Identification NPS Y4 |
| indidy4  | Individual ID                          |
| ag01\_01 | Name                                   |
| ag01\_02 | Age                                    |
| ag01\_03 | Sex                                    |
| ag01\_04 | 'X' = Questionnaire Respondent         |

#+BEGIN_SRC python
#Original household demographics table (sum of all in household and the corresponding log)
size = y.iloc[0:, [1, 2]].fillna(0)

data = x.iloc[0:, [1, 2, 5]].fillna(0)
households = data['j'].unique()

demographic = pd.DataFrame(index=households)
demographic['sum'] = 0

for i in households:
    to_transfer = size[size['y4_hhid'] == i]
    to_append = max(to_transfer['indidy4'].tolist())
    demographic.loc[i] = to_append
    #print(i)
demographic.head()
#test = demographic['sum'].astype('int')
#test
demographic['log Hsize'] = np.log(demographic['sum'].astype('int'))
demographic.head()
#+END_SRC

** Nutrients
   :PROPERTIES:
   :CUSTOM_ID: nutrients
   :END:

#+BEGIN_SRC python
    nutrients = dataframe_from_gspreadsheet("For Use in Code", Sheets['Nutrient Tables'])
    nutrients.head()
#+END_SRC

